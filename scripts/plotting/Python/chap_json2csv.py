#!/usr/bin/env python3

# CHAP - The Channel Annotation Package
#
# Copyright (c) 2016 - 2019 Gianni Klesse, Shanlin Rao, Mark S. P. Sansom, and
# Stephen J. Tucker
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


"""Generates pathway profile CSV file from CHAP output data.

This script reads a JSON-formatted output file generated by CHAP, extracts the
pathway profile data, and writes it to a CSV file. This is useful for
visualising profiles useing spreadsheet software like Microsoft Excel or
Graphpad Prism.
"""

import argparse
import csv
import json


def main(argdict):
    """Main function for entry point checking.

    Expects a dictionary of command line arguments.
    """

    # load CHAP output data:
    print("loading CHAP data from " + argdict["i"] + " ... ", end="")
    with open(argdict["i"], "r") as f:
        chap_data = json.load(f)
    print("done")

    # write profile data to CSV:
    print("writing pathway profiles to " + argdict["o"] + " ... ", end="")
    with open(argdict["o"], "w") as f:
        # prepare a CSV file writer:
        w = csv.writer(f)

        # write data to CSV file:
        w.writerow(chap_data["pathwayProfile"].keys())
        w.writerows(zip(*chap_data["pathwayProfile"].values()))
    print("done")


if __name__ == "__main__":

    # parse command line arguments:
    parser = argparse.ArgumentParser(
        description = __doc__,
        formatter_class = argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "-i",
        type = str,
        default = "output.json",
        help = """CHAP output file in JSON format."""
    )
    parser.add_argument(
        "-o",
        type = str,
        default = "profiles.csv",
        help = """CHAP profiles file in CSV format."""
    )

    # parse arguments and convert to dictionary:
    args = parser.parse_args()
    argdict = vars(args)

    # pass arguments to main function:
    main(argdict)
